################
cd /home/ubuntu
_________________________________________________________________________________________________________________________________
2. Create a bridge network in Docker using the following docker network create command:
docker network create jenkins

3. Docker commands inside Jenkins nodes, download and run the docker:dind Docker image using the following docker run command:
***what port you need to access, need to add to --publish***
_________________________________________________________________________________________________________________________________
//windows
docker run ^
  --name jenkins-docker ^
  --rm ^
  --detach ^
  --privileged ^
  --network jenkins ^
  --network-alias docker ^
  --env DOCKER_TLS_CERTDIR=/certs ^
  --volume jenkins-docker-certs:/certs/client ^
  --volume jenkins-data:/var/jenkins_home ^
  --publish 3000:3000 ^
  --publish 80:80 ^
  --publish 2376:2376 ^
  docker:dind ^
  --storage-driver overlay2
_________________________________________________________________________________________________________________________________
//ubuntu
docker run \
  --name jenkins-docker \
  --rm \
  --detach \
  --privileged \
  --network jenkins \
  --network-alias docker \
  --env DOCKER_TLS_CERTDIR=/certs \
  --volume jenkins-docker-certs:/certs/client \
  --volume jenkins-data:/var/jenkins_home \
  --publish 3000:3000 \
  --publish 80:80 \
  --publish 2376:2376 \
  docker:dind \
  --storage-driver overlay2

_________________________________________________________________________________________________________________________________
4. Customise official Jenkins Docker image, by executing below two steps:
a. Create Dockerfile with the following content:

_________________________________________________________________________________________________________________________________

FROM jenkins/jenkins:2.303.2-jdk11
USER root
RUN apt-get update && apt-get install -y apt-transport-https \
       ca-certificates curl gnupg2 \
       software-properties-common
RUN curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
RUN apt-key fingerprint 0EBFCD88
RUN add-apt-repository \
       "deb [arch=amd64] https://download.docker.com/linux/debian \
       $(lsb_release -cs) stable"
RUN apt-get update && apt-get install -y docker-ce-cli
USER jenkins
RUN jenkins-plugin-cli --plugins "blueocean:1.24.7 docker-workflow:1.26"
_________________________________________________________________________________________________________________________________

b. Build a new docker image from this Dockerfile and assign the image a meaningful name, e.g. "myjenkins-blueocean:1.1":
docker build -t myjenkins-blueocean:1.1 .

5. Run your own myjenkins-blueocean:1.1 image as a container in Docker using the following docker run command:

_________________________________________________________________________________________________________________________________
//windows
docker run ^
  --name jenkins-blueocean ^
  --rm ^
  --detach ^
  --network jenkins ^
  --env DOCKER_HOST=tcp://docker:2376 ^
  --env DOCKER_CERT_PATH=/certs/client ^
  --env DOCKER_TLS_VERIFY=1 ^
  --volume jenkins-data:/var/jenkins_home ^
  --volume jenkins-docker-certs:/certs/client:ro ^
  --volume "%HOMEDRIVE%%HOMEPATH%":/home ^
  --publish 8080:8080 ^
  --publish 50000:50000 ^
  myjenkins-blueocean:1.1
_________________________________________________________________________________________________________________________________
//ubuntu
docker run \
  --name jenkins-blueocean \
  --rm \
  --detach \
  --network jenkins \
  --env DOCKER_HOST=tcp://docker:2376 \
  --env DOCKER_CERT_PATH=/certs/client \
  --env DOCKER_TLS_VERIFY=1 \
  --volume jenkins-data:/var/jenkins_home \
  --volume jenkins-docker-certs:/certs/client:ro \
  --volume "$HOME":/home \
  --publish 8080:8080 \
  --publish 50000:50000 \
  myjenkins-blueocean:1.1
  
_________________________________________________________________________________________________________________________________

docker logs jenkins-blueocean

http://localhost:8080

https://www.jenkins.io/pipeline/getting-started-pipelines/


# get initial admin password
docker logs jenkins-blueocean
_________________________________________________________________________________________________________________________________

## Maps (i.e. "publishes") port 8080 of the current container to port 8080 on the host machine##
### first number represents the port on the host###
### last represents the containerâ€™s port###

(end) stop your Docker container by running:
docker stop jenkins-blueocean jenkins-docker


(optional) accessing docker container
docker exec -it jenkins-blueocean bash

(optional) accessing docker logs
docker logs <docker-container-name>
